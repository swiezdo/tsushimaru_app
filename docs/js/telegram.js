// telegram.js
// –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp SDK, —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ—Ç–¥–∞—á–µ–π –∏ –±–∞–∑–æ–≤—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏.

export const tg = window.Telegram?.WebApp || null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp + –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
(function initTG() {
  if (!tg) return;
  try {
    tg.ready();
    tg.expand();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
    const platform = tg.platform || 'unknown';
    const userAgent = navigator.userAgent.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const isDesktopByPlatform = platform === 'desktop' || platform === 'macos' || platform === 'linux' || platform === 'windows';
    const isDesktopByUserAgent = userAgent.includes('windows') || userAgent.includes('macintosh') || userAgent.includes('linux') || userAgent.includes('x11');
    const isMobileByPlatform = platform === 'ios' || platform === 'android';
    const isMobileByUserAgent = userAgent.includes('mobile') || userAgent.includes('android') || userAgent.includes('iphone') || userAgent.includes('ipad');
    
    const isDesktop = isDesktopByPlatform || (isDesktopByUserAgent && !isMobileByUserAgent);
    const isMobile = isMobileByPlatform || isMobileByUserAgent;
    
    console.log('üîç Platform detection:', {
      tgPlatform: platform,
      userAgent: userAgent,
      isDesktopByPlatform,
      isDesktopByUserAgent,
      isMobileByPlatform,
      isMobileByUserAgent,
      finalIsDesktop: isDesktop,
      finalIsMobile: isMobile
    });
    
    if (isDesktop) {
      // –ù–∞ –ü–ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ expand() - –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      console.log('üñ•Ô∏è Desktop detected - using expand mode only');
    } else if (isMobile) {
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      tg.requestFullscreen();
      console.log('üì± Mobile detected - using fullscreen mode');
    } else {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ expand()
      console.log('‚ùì Unknown platform - using expand mode only');
    }

    const th = tg.themeParams || {};
    if (th.bg_color)   document.documentElement.style.setProperty('--tg-bg', th.bg_color);
    if (th.text_color) document.documentElement.style.setProperty('--tg-tx', th.text_color);
    if (th.hint_color) document.documentElement.style.setProperty('--tg-hint', th.hint_color);

    document.documentElement.classList.add('tg');
    tg.MainButton.hide();
  } catch (_) {}
})();

// –ë–∞–∑–æ–≤—ã–µ —Ö–∞–ø—Ç–∏–∫–∏
export function hapticOK()  { try { tg?.HapticFeedback?.notificationOccurred('success'); } catch {} }
export function hapticERR() { try { tg?.HapticFeedback?.notificationOccurred('error'); }   catch {} }
export function hapticTap() { try { tg?.HapticFeedback?.impactOccurred('light'); }         catch {} }

// ¬´–£–º–Ω—ã–π¬ª Tap: –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –∂–µ—Å—Ç –±—ã–ª –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
export function hapticTapSmart() {
  try {
    if (window.__tsuShouldHaptic?.()) hapticTap();
  } catch {}
}

// –£—Ç–∏–ª–∏—Ç—ã DOM/—Å–∫—Ä–æ–ª–ª–∞
export function $(id) {
  return document.getElementById(id);
}
export function scrollTopSmooth() {
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ iOS
export function hideKeyboard() {
  // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  if (document.activeElement && document.activeElement.blur) {
    document.activeElement.blur();
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
export function enterFullscreen() {
  try { tg?.requestFullscreen(); } catch {}
}

export function exitFullscreen() {
  try { tg?.exitFullscreen(); } catch {}
}

export function isFullscreen() {
  try { return tg?.isFullscreen || false; } catch { return false; }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
export function getPlatform() {
  try { return tg?.platform || 'unknown'; } catch { return 'unknown'; }
}

export function isDesktop() {
  try {
    const platform = tg?.platform || 'unknown';
    const userAgent = navigator.userAgent.toLowerCase();
    
    const isDesktopByPlatform = platform === 'desktop' || platform === 'macos' || platform === 'linux' || platform === 'windows';
    const isDesktopByUserAgent = userAgent.includes('windows') || userAgent.includes('macintosh') || userAgent.includes('linux') || userAgent.includes('x11');
    const isMobileByUserAgent = userAgent.includes('mobile') || userAgent.includes('android') || userAgent.includes('iphone') || userAgent.includes('ipad');
    
    return isDesktopByPlatform || (isDesktopByUserAgent && !isMobileByUserAgent);
  } catch { 
    return false; 
  }
}

export function isMobile() {
  try {
    const platform = tg?.platform || 'unknown';
    const userAgent = navigator.userAgent.toLowerCase();
    
    const isMobileByPlatform = platform === 'ios' || platform === 'android';
    const isMobileByUserAgent = userAgent.includes('mobile') || userAgent.includes('android') || userAgent.includes('iphone') || userAgent.includes('ipad');
    
    return isMobileByPlatform || isMobileByUserAgent;
  } catch { 
    return false; 
  }
}