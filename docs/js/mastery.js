// mastery.js
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞

import { fetchMastery } from './api.js';
import { hapticTapSmart } from './telegram.js';
import { showScreen } from './ui.js';

// –ö—ç—à –∫–æ–Ω—Ñ–∏–≥–∞
let masteryConfig = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ JSON
async function loadMasteryConfig() {
    if (masteryConfig) return masteryConfig;
    
    try {
        const response = await fetch('./mastery-config.json');
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥');
        masteryConfig = await response.json();
        return masteryConfig;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:', error);
        return null;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á—É
function getCategoryByKey(config, key) {
    if (!config || !config.categories) return null;
    return config.categories.find(cat => cat.key === key) || null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –Ω–æ–º–µ—Ä—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getLevelByNumber(category, levelNum) {
    if (!category || !category.levels) return null;
    return category.levels.find(level => level.level === levelNum) || null;
}

// –†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
function calculateProgress(currentLevel, maxLevels) {
    if (maxLevels === 0) return 0;
    return Math.round((currentLevel / maxLevels) * 100);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
function getButtonStyles(category, currentLevel) {
    const maxLevels = category.maxLevels;
    const styles = {
        classes: ['badge-btn', `${category.key}-badge`],
        backgroundImage: null,
        backgroundSize: null,
        backgroundPosition: null,
        showIcon: false
    };
    
    // –£—Ä–æ–≤–µ–Ω—å 0: –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å (–±–µ–∑ –∫–æ–Ω—Ç—É—Ä–∞, –±–µ–∑ —Ñ–æ–Ω–∞)
    if (currentLevel === 0) {
        return styles;
    }
    
    // –£—Ä–æ–≤–µ–Ω—å 1+: –∫—Ä–∞—Å–Ω—ã–π –∫–æ–Ω—Ç—É—Ä (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å)
    styles.classes.push('has-glow');
    
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ —É—Ä–æ–≤–Ω–µ–π
    if (maxLevels === 3) {
        // 3 —É—Ä–æ–≤–Ω—è: 2 - background.jpg, 3 - background.gif + –∏–∫–æ–Ω–∫–∞
        if (currentLevel >= 2) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.jpg')`;
            styles.backgroundSize = '160% auto';
            styles.backgroundPosition = 'center';
        }
        if (currentLevel >= 3) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.gif')`;
            styles.showIcon = true;
        }
    } else if (maxLevels === 4) {
        // 4 —É—Ä–æ–≤–Ω—è: 2 - background.jpg, 3 - background.gif, 4 - background.gif + –∏–∫–æ–Ω–∫–∞
        if (currentLevel >= 2) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.jpg')`;
            styles.backgroundSize = '160% auto';
            styles.backgroundPosition = 'center';
        }
        if (currentLevel >= 3) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.gif')`;
        }
        if (currentLevel >= 4) {
            styles.showIcon = true;
        }
    } else if (maxLevels === 5) {
        // 5 —É—Ä–æ–≤–Ω–µ–π: 2 - background.jpg, 3 - background2.jpg, 4 - background.gif, 5 - background.gif + –∏–∫–æ–Ω–∫–∞
        if (currentLevel >= 2) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.jpg')`;
            styles.backgroundSize = '160% auto';
            styles.backgroundPosition = 'center';
        }
        if (currentLevel >= 3) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background2.jpg')`;
            styles.backgroundSize = '160% auto';
            styles.backgroundPosition = 'center';
        }
        if (currentLevel >= 4) {
            styles.backgroundImage = `url('./assets/mastery/${category.key}/background.gif')`;
        }
        if (currentLevel >= 5) {
            styles.showIcon = true;
        }
    }
    
    return styles;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –∫–Ω–æ–ø–∫–∏
function createBadgeButton(category, currentLevel) {
    const levelData = getLevelByNumber(category, currentLevel);
    const maxLevels = category.maxLevels;
    const progress = calculateProgress(currentLevel, maxLevels);
    const styles = getButtonStyles(category, currentLevel);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ level = 0
    const levelName = currentLevel > 0 && levelData ? levelData.name : (category.name || category.key);
    
    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
    const button = document.createElement('button');
    button.type = 'button';
    button.className = styles.classes.join(' ');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (styles.backgroundImage) {
        button.style.backgroundImage = styles.backgroundImage;
        button.style.backgroundRepeat = 'no-repeat';
        button.style.backgroundPosition = styles.backgroundPosition || 'center';
        button.style.backgroundSize = styles.backgroundSize || '160% auto';
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const titleDiv = document.createElement('div');
    titleDiv.className = 'badge-title';
    if (styles.showIcon) {
        titleDiv.style.display = 'inline-flex';
        titleDiv.style.alignItems = 'center';
        titleDiv.style.gap = '8px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–∞–∫ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const iconSpan = document.createElement('span');
        iconSpan.style.cssText = `
            width: 32px;
            height: 32px;
            background-image: url('./assets/mastery/${category.key}/icon.svg');
            background-repeat: no-repeat;
            background-position: center;
            background-size: contain;
            filter: drop-shadow(0 0 6px rgba(212, 175, 55, 0.6)) drop-shadow(0 0 10px rgba(212, 175, 55, 0.35));
            opacity: 0.95;
            flex-shrink: 0;
        `;
        titleDiv.appendChild(iconSpan);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
    const titleText = document.createTextNode(levelName);
    titleDiv.appendChild(titleText);
    
    // –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ —É—Ä–æ–≤–Ω–µ–º
    const progressRow = document.createElement('div');
    progressRow.className = 'badge-progress-row';
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressDiv = document.createElement('div');
    progressDiv.className = 'badge-progress';
    progressDiv.setAttribute('aria-label', '–ü—Ä–æ–≥—Ä–µ—Å—Å');
    
    const progressFill = document.createElement('div');
    progressFill.className = 'badge-progress-fill';
    progressFill.style.setProperty('--progress', `${progress}%`);
    
    progressDiv.appendChild(progressFill);
    
    // –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è
    const levelDiv = document.createElement('div');
    levelDiv.className = 'badge-level';
    levelDiv.textContent = currentLevel > 0 ? `–£—Ä. ${currentLevel}` : '–£—Ä. 0';
    
    progressRow.appendChild(progressDiv);
    progressRow.appendChild(levelDiv);
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    button.appendChild(titleDiv);
    button.appendChild(progressRow);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    button.addEventListener('click', () => {
        hapticTapSmart();
        openMasteryDetail(category.key);
    });
    
    return button;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
export async function renderMasteryButtons() {
    console.log('üéØ renderMasteryButtons –≤—ã–∑–≤–∞–Ω');
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    let container = document.getElementById('masteryButtonsContainer');
    if (!container) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä
        container = document.querySelector('#masteryButtonsContainer');
    }
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å id:', document.querySelectorAll('[id*="mastery"]'));
        return;
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', container);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞...');
    const config = await loadMasteryConfig();
    if (!config) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞');
        container.innerHTML = '<div class="hint muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞</div>';
        return;
    }
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', config.categories?.length);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    let levels;
    try {
        levels = await fetchMastery();
        console.log('‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—É—á–µ–Ω—ã:', levels);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:', error);
        levels = { solo: 0, hellmode: 0, raid: 0, speedrun: 0 };
    }
    
    // –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const categoryOrder = ['solo', 'hellmode', 'raid', 'speedrun'];
    
    // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let buttonsCreated = 0;
    for (const key of categoryOrder) {
        const category = getCategoryByKey(config, key);
        if (!category) {
            console.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ`);
            continue;
        }
        
        const currentLevel = levels[key] || 0;
        console.log(`üî® –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ${key}, —É—Ä–æ–≤–µ–Ω—å: ${currentLevel}`);
        const button = createBadgeButton(category, currentLevel);
        container.appendChild(button);
        buttonsCreated++;
    }
    
    console.log(`‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttonsCreated}`);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
export async function openMasteryDetail(categoryKey) {
    console.log('üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryKey);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    const config = await loadMasteryConfig();
    if (!config) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = getCategoryByKey(config, categoryKey);
    if (!category) {
        console.error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let levels;
    try {
        levels = await fetchMastery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:', error);
        levels = { solo: 0, hellmode: 0, raid: 0, speedrun: 0 };
    }
    
    const currentLevel = levels[categoryKey] || 0;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    renderMasteryDetail(category, currentLevel);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
    showScreen('masteryDetail');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
function renderMasteryDetail(category, currentLevel) {
    const container = document.getElementById('masteryDetailContainer');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    container.innerHTML = '';
    
    const maxLevels = category.maxLevels;
    const progress = calculateProgress(currentLevel, maxLevels);
    const styles = getButtonStyles(category, currentLevel);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–µ–º
    const headerCard = document.createElement('section');
    headerCard.className = `card ${styles.classes.join(' ')}`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (styles.backgroundImage) {
        headerCard.style.backgroundImage = styles.backgroundImage;
        headerCard.style.backgroundRepeat = 'no-repeat';
        headerCard.style.backgroundPosition = styles.backgroundPosition || 'center';
        headerCard.style.backgroundSize = styles.backgroundSize || '160% auto';
    }
    
    const headerTitle = document.createElement('h2');
    headerTitle.className = 'card-title';
    headerTitle.textContent = `${category.name} ‚Äî –£—Ä. ${currentLevel} –∏–∑ ${maxLevels}`;
    headerCard.appendChild(headerTitle);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryProgressRow = document.createElement('div');
    categoryProgressRow.style.marginTop = 'var(--space-2)';
    
    const categoryProgressDiv = document.createElement('div');
    categoryProgressDiv.className = 'badge-progress';
    
    const categoryProgressFill = document.createElement('div');
    categoryProgressFill.className = 'badge-progress-fill';
    categoryProgressFill.style.setProperty('--progress', `${progress}%`);
    
    categoryProgressDiv.appendChild(categoryProgressFill);
    categoryProgressRow.appendChild(categoryProgressDiv);
    
    headerCard.appendChild(categoryProgressRow);
    container.appendChild(headerCard);
    
    // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ level > 0)
    if (currentLevel > 0) {
        const currentLevelData = getLevelByNumber(category, currentLevel);
        if (currentLevelData) {
            const currentCard = document.createElement('section');
            currentCard.className = 'card current-level';
            
            const currentTitle = document.createElement('h3');
            currentTitle.className = 'card-title';
            currentTitle.innerHTML = `‚úÖ ${currentLevelData.name}`;
            currentCard.appendChild(currentTitle);
            
            const currentDesc = document.createElement('div');
            currentDesc.className = 'mastery-description';
            currentDesc.style.whiteSpace = 'pre-line';
            currentDesc.textContent = currentLevelData.description;
            currentCard.appendChild(currentDesc);
            
            container.appendChild(currentCard);
        }
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
    if (currentLevel < maxLevels) {
        const nextLevelNum = currentLevel + 1;
        const nextLevelData = getLevelByNumber(category, nextLevelNum);
        
        if (nextLevelData) {
            const nextCard = document.createElement('section');
            nextCard.className = 'card next-level';
            
            const nextTitle = document.createElement('h3');
            nextTitle.className = 'card-title';
            nextTitle.innerHTML = `‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextLevelData.name}`;
            nextCard.appendChild(nextTitle);
            
            const nextDesc = document.createElement('div');
            nextDesc.className = 'mastery-description';
            nextDesc.style.whiteSpace = 'pre-line';
            nextDesc.textContent = nextLevelData.description;
            nextCard.appendChild(nextDesc);
            
            const nextProof = document.createElement('div');
            nextProof.className = 'mastery-proof';
            nextProof.style.marginTop = 'var(--space-3)';
            nextProof.style.paddingTop = 'var(--space-3)';
            nextProof.style.borderTop = '1px solid var(--color-border)';
            nextProof.style.fontSize = 'var(--fs-14)';
            nextProof.style.color = 'var(--tg-hint)';
            nextProof.textContent = `üì∏ ${nextLevelData.proof}`;
            nextCard.appendChild(nextProof);
            
            container.appendChild(nextCard);
        }
    } else {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        const maxCard = document.createElement('section');
        maxCard.className = 'card max-level';
        
        const maxTitle = document.createElement('h3');
        maxTitle.className = 'card-title';
        maxTitle.innerHTML = 'üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!';
        maxCard.appendChild(maxTitle);
        
        const maxLevelData = getLevelByNumber(category, maxLevels);
        if (maxLevelData) {
            const maxDesc = document.createElement('div');
            maxDesc.className = 'mastery-description';
            maxDesc.style.whiteSpace = 'pre-line';
            maxDesc.textContent = maxLevelData.description;
            maxCard.appendChild(maxDesc);
        }
        
        container.appendChild(maxCard);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
export function initMastery() {
    // –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ renderMasteryButtons()
}

