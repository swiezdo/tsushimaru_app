// api.js
// API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º Tsushima Mini App

import { tg } from './telegram.js';

// –ë–∞–∑–æ–≤—ã–π URL API (–æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–∞—à Cloudflare Tunnel URL)
const API_BASE = 'https://painting-quarters-compound-promote.trycloudflare.com';

// –ü–æ–ª—É—á–µ–Ω–∏–µ initData –∏–∑ Telegram WebApp
function getInitData() {
    if (!tg || !tg.initData) {
        console.error('Telegram WebApp initData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return null;
    }
    return tg.initData;
}

// –ë–∞–∑–æ–≤—ã–π fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function apiRequest(endpoint, options = {}) {
    const initData = getInitData();
    if (!initData) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
    }

    const url = `${API_BASE}${endpoint}`;
    const defaultOptions = {
        headers: {
            'X-Telegram-Init-Data': initData,
            'Content-Type': 'application/json',
        },
    };

    const mergedOptions = {
        ...defaultOptions,
        ...options,
        headers: {
            ...defaultOptions.headers,
            ...options.headers,
        },
    };

    try {
        const response = await fetch(url, mergedOptions);
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        return await response.json();
    } catch (error) {
        console.error('API Request failed:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function fetchProfile() {
    try {
        const data = await apiRequest('/api/profile.get');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç—Ä–æ—Ñ–µ–∏
        if (data.trophies && typeof data.trophies === 'string') {
            data.trophies = data.trophies.split(',').map(t => t.trim()).filter(t => t.length > 0);
        }
        
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        throw error;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function saveProfile(formData) {
    try {
        const initData = getInitData();
        if (!initData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const data = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        data.append('real_name', formData.real_name || '');
        data.append('psn_id', formData.psn_id || '');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const platforms = formData.platforms || [];
        platforms.forEach(platform => {
            data.append('platforms', platform);
        });
        
        const modes = formData.modes || [];
        modes.forEach(mode => {
            data.append('modes', mode);
        });
        
        const goals = formData.goals || [];
        goals.forEach(goal => {
            data.append('goals', goal);
        });
        
        const difficulties = formData.difficulties || [];
        difficulties.forEach(difficulty => {
            data.append('difficulties', difficulty);
        });

        console.log('üìã FormData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
        for (let [key, value] of data.entries()) {
            console.log(`  ${key}: ${value}`);
        }

        const url = `${API_BASE}/api/profile.save`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': initData,
            },
            body: data,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        const result = await response.json();
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        throw error;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
export async function checkApiHealth() {
    try {
        const response = await fetch(`${API_BASE}/health`);
        if (!response.ok) {
            throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
export async function getApiStats() {
    try {
        const data = await apiRequest('/api/stats');
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        throw error;
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
export async function testConnection() {
    try {
        await checkApiHealth();
        return true;
    } catch (error) {
        console.error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function checkUserRegistration() {
    try {
        await fetchProfile();
        return true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ç—É—Å 200)
    } catch (error) {
        if (error.status === 404) {
            return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (—Å–µ—Ç—å, —Å–µ—Ä–≤–µ—Ä) —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        return false;
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ò–õ–î–ê–ú–ò ==========

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞
export async function createBuild(buildData) {
    try {
        const initData = getInitData();
        if (!initData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        const data = new FormData();
        data.append('name', buildData.name || '');
        data.append('class_name', buildData.class || '');
        data.append('tags', JSON.stringify(buildData.tags || []));
        data.append('description', buildData.description || '');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (buildData.photo_1) data.append('photo_1', buildData.photo_1);
        if (buildData.photo_2) data.append('photo_2', buildData.photo_2);

        const url = `${API_BASE}/api/builds.create`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': initData,
            },
            body: data,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–¥–∞:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –±–∏–ª–¥–æ–≤
export async function getMyBuilds() {
    try {
        const data = await apiRequest('/api/builds.getMy');
        return data.builds || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–¥–æ–≤:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤
export async function getPublicBuilds() {
    try {
        const response = await fetch(`${API_BASE}/api/builds.getPublic`);
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }
        const data = await response.json();
        return data.builds || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤:', error);
        throw error;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –±–∏–ª–¥–∞
export async function toggleBuildPublish(buildId, isPublic) {
    try {
        const initData = getInitData();
        if (!initData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        const data = new FormData();
        data.append('build_id', buildId);
        data.append('is_public', isPublic ? 1 : 0);

        const url = `${API_BASE}/api/builds.togglePublish`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': initData,
            },
            body: data,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –±–∏–ª–¥–∞:', error);
        throw error;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–ª–¥–∞
export async function deleteBuild(buildId) {
    try {
        const initData = getInitData();
        if (!initData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º buildId –≤ —á–∏—Å–ª–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        const buildIdNum = parseInt(buildId, 10);
        const url = `${API_BASE}/api/builds.delete?build_id=${buildIdNum}`;
        const response = await fetch(url, {
            method: 'DELETE',
            headers: {
                'X-Telegram-Init-Data': initData,
            },
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–¥–∞:', error);
        throw error;
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–†–û–§–ï–Ø–ú–ò ==========

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π
export async function submitTrophyApplication(trophyId, photos, comment) {
    try {
        const initData = getInitData();
        if (!initData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        const data = new FormData();
        data.append('trophy_id', trophyId);
        data.append('comment', comment || '');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photos.forEach(photo => {
            data.append('photos', photo);
        });

        const url = `${API_BASE}/api/trophies.submit`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': initData,
            },
            body: data,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const error = new Error(errorData.detail || `HTTP ${response.status}`);
            error.status = response.status;
            throw error;
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
export async function fetchParticipants() {
    try {
        const data = await apiRequest('/api/users.list');
        return data.users || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ user_id
export async function fetchUserProfile(userId) {
    try {
        const data = await apiRequest(`/api/users.getProfile?target_user_id=${userId}`);
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ user_id
export async function fetchUserBuilds(userId) {
    try {
        const data = await apiRequest(`/api/builds.getUserBuilds?target_user_id=${userId}`);
        return data.builds || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { API_BASE };
