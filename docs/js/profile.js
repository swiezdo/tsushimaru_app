// profile.js
import { tg, $, hapticTapSmart, hapticERR, hapticOK, hideKeyboard } from './telegram.js';
import { focusAndScrollIntoView } from './ui.js';
import { fetchProfile, saveProfile as apiSaveProfile, uploadAvatar, API_BASE } from './api.js';
import { renderChips, activeValues, setActive, shake, prettyLines, validatePSNId, safeLocalStorageGet, safeLocalStorageSet } from './utils.js';

// ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
const PLATFORM   = ['üéÆ PlayStation','üíª –ü–ö'];
const MODES      = ['üìñ –°—é–∂–µ—Ç','üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë','‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫–∏','üìú –ì–ª–∞–≤—ã'];
const GOALS      = ['üîé –£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ','üë• –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤'];
const DIFFICULTY = ['ü•â –ë—Ä–æ–Ω–∑–∞','ü•à –°–µ—Ä–µ–±—Ä–æ','ü•á –ó–æ–ª–æ—Ç–æ','üèÖ –ü–ª–∞—Ç–∏–Ω–∞','üëª –ö–æ—à–º–∞—Ä','üî• HellMode'];

// ---------- LocalStorage ----------
// –£–¥–∞–ª–µ–Ω–æ: –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è

// ---------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ----------
const v_real_name  = $('v_real_name');
const v_psn_id     = $('v_psn_id');
const v_platform   = $('v_platform');
const v_modes      = $('v_modes');
const v_goals      = $('v_goals');
const v_difficulty = $('v_difficulty');

// ---------- –§–æ—Ä–º–∞ ----------
const profileForm     = $('profileForm');
const profileSaveBtn  = $('profileSaveBtn');
const nameErrorEl     = $('nameError');
const psnErrorEl      = $('psnError');

// ---------- –ê–≤–∞—Ç–∞—Ä–∫–∞ ----------
const avatarUploadBtn = $('avatarUploadBtn');
const avatarFileInput = $('avatarFileInput');
const avatarPreview = $('avatarPreview');
const avatarPlaceholder = $('avatarPlaceholder');
let selectedAvatarFile = null; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
let currentUserId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –ö–µ—à –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∏–ø–æ–≤
let chipsCache = null;

function getChipsCache() {
  if (!chipsCache) {
    chipsCache = {
      platform: $('platformChips'),
      modes: $('modesChips'),
      goals: $('goalsChips'),
      difficulty: $('difficultyChips')
    };
  }
  return chipsCache;
}

function refreshProfileView() {
  const cache = getChipsCache();
  if (v_platform)   v_platform.textContent   = prettyLines(activeValues(cache.platform));
  if (v_modes)      v_modes.textContent      = prettyLines(activeValues(cache.modes));
  if (v_goals)      v_goals.textContent      = prettyLines(activeValues(cache.goals));
  if (v_difficulty) v_difficulty.textContent = prettyLines(activeValues(cache.difficulty));
}

function loadProfileToForm(profile) {
  if (!profile) return;
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
  if (profileForm.real_name) {
    profileForm.real_name.value = profile.real_name || '';
  }
  if (profileForm.psn_id) {
    profileForm.psn_id.value = profile.psn_id || '';
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—è –∫–µ—à
  const cache = getChipsCache();
  if (profile.platforms) setActive(cache.platform, profile.platforms);
  if (profile.modes) setActive(cache.modes, profile.modes);
  if (profile.goals) setActive(cache.goals, profile.goals);
  if (profile.difficulties) setActive(cache.difficulty, profile.difficulties);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
  if (v_real_name) v_real_name.textContent = profile.real_name || '‚Äî';
  if (v_psn_id) v_psn_id.textContent = profile.psn_id || '‚Äî';
  refreshProfileView();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
  if (profile.avatar_url) {
    avatarPreview.src = API_BASE + profile.avatar_url;
    avatarPreview.classList.remove('hidden');
    avatarPlaceholder.classList.add('hidden');
    avatarUploadBtn.classList.add('has-avatar');
  } else {
    avatarPreview.classList.add('hidden');
    avatarPlaceholder.classList.remove('hidden');
    avatarUploadBtn.classList.remove('has-avatar');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchProfileFromServer() {
  try {
    const serverProfile = await fetchProfile();
    if (serverProfile) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
      currentUserId = serverProfile.user_id;
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      loadProfileToForm(serverProfile);
      console.log('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ (online-only —Ä–µ–∂–∏–º)
    if (error.status === 401) {
      tg?.showPopup?.({ 
        title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.', 
        buttons: [{ type: 'ok' }] 
      });
    } else if (error.status === 404) {
      // 404 - –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
      console.log('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } else {
      // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, —Å–µ—Ä–≤–µ—Ä) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      tg?.showPopup?.({ 
        title: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 
        buttons: [{ type: 'ok' }] 
      });
    }
  }
}

export function initProfile() {
  // –ü–æ–ª—É—á–∞–µ–º –∫–µ—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∏–ø–æ–≤
  const cache = getChipsCache();
  
  // –ß–∏–ø—ã
  renderChips(cache.platform,   PLATFORM,   { onChange: refreshProfileView });
  renderChips(cache.modes,      MODES,      { onChange: refreshProfileView });
  renderChips(cache.goals,      GOALS,      { onChange: refreshProfileView });
  renderChips(cache.difficulty, DIFFICULTY, { onChange: refreshProfileView });

  // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
  if (avatarUploadBtn && avatarFileInput) {
    avatarUploadBtn.addEventListener('click', () => {
      avatarFileInput.click();
    });
    
    avatarFileInput.addEventListener('change', (e) => {
      const file = e.target.files?.[0];
      if (!file) return;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        tg?.showPopup?.({ 
          title: '–û—à–∏–±–∫–∞', 
          message: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', 
          buttons: [{ type: 'ok' }] 
        });
        hapticERR();
        e.target.value = ''; // –û—á–∏—â–∞–µ–º input
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ (10 –ú–ë)
      if (file.size > 10 * 1024 * 1024) {
        tg?.showPopup?.({ 
          title: '–û—à–∏–±–∫–∞', 
          message: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë.', 
          buttons: [{ type: 'ok' }] 
        });
        hapticERR();
        e.target.value = '';
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
      const objectUrl = URL.createObjectURL(file);
      avatarPreview.src = objectUrl;
      avatarPreview.classList.remove('hidden');
      avatarPlaceholder.classList.add('hidden');
      avatarUploadBtn.classList.add('has-avatar');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      selectedAvatarFile = file;
      
      hapticTapSmart();
    });
  }

  if (!profileForm) return;
  const nameInput = profileForm.real_name;
  const psnInput  = profileForm.psn_id;

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ Enter
  nameInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') { 
      e.preventDefault(); 
      psnInput?.focus(); 
    }
  });
  psnInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') { 
      e.preventDefault(); 
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ iOS
      hideKeyboard();
    }
  });

  // Tap –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å–∞–º –ø–æ–¥–≤–∏–Ω–µ—Ç –ø–æ–ª–µ)
  nameInput?.addEventListener('focus', ()=>{ hapticTapSmart(); }, {passive:true});
  psnInput?.addEventListener('focus',  ()=>{ hapticTapSmart(); }, {passive:true});

  // –°–∫—Ä—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  nameInput?.addEventListener('input', ()=>{ nameErrorEl?.classList.add('hidden'); });
  psnInput?.addEventListener('input', ()=>{ psnErrorEl?.classList.add('hidden'); });

  function isNameOk() {
    return !!(nameInput && (nameInput.value || '').trim());
  }
  function isPSNOk() {
    if (!psnInput) return false;
    return validatePSNId(psnInput.value);
  }

  profileForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const okName = isNameOk();
    const okPSN  = isPSNOk();

    if (!okName || !okPSN) {
      let firstBad = null;
      
      if (!okName) { 
        nameErrorEl?.classList.remove('hidden');
        shake(nameInput); 
        firstBad = firstBad || nameInput; 
      }
      
      if (!okPSN) {
        const val = (psnInput?.value || '').trim();
        if (!val) {
          psnErrorEl.textContent = '–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –≤ PlayStation Network';
        } else {
          psnErrorEl.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
        }
        psnErrorEl?.classList.remove('hidden');
        shake(psnInput); 
        if (!firstBad) firstBad = psnInput;
      }
      
      if (firstBad) focusAndScrollIntoView(firstBad);
      hapticERR();
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const cache = getChipsCache();
    const profileData = {
      real_name: (nameInput?.value || '').trim(),
      psn_id: (psnInput?.value || '').trim(),
      platforms: activeValues(cache.platform),
      modes: activeValues(cache.modes),
      goals: activeValues(cache.goals),
      difficulties: activeValues(cache.difficulty)
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const originalBtnText = profileSaveBtn?.textContent;
    if (profileSaveBtn) {
      profileSaveBtn.disabled = true;
      profileSaveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await apiSaveProfile(profileData);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
      if (selectedAvatarFile && currentUserId) {
        try {
          await uploadAvatar(currentUserId, selectedAvatarFile);
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
          await fetchProfileFromServer();
          selectedAvatarFile = null; // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          console.log('–ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (avatarError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', avatarError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å
        if (v_real_name) v_real_name.textContent = profileData.real_name || '‚Äî';
        if (v_psn_id) v_psn_id.textContent = profileData.psn_id || '‚Äî';
        refreshProfileView();
      }

      hapticOK();
      tg?.showPopup?.({ title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', buttons: [{ type: 'ok' }] });
      window.scrollTo({ top: 0, behavior: 'smooth' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.';
      if (error.status === 401) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
      } else if (error.status === 400) {
        errorMessage = error.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π.';
      } else if (error.status >= 500) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (!navigator.onLine) {
        errorMessage = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      }
      
      tg?.showPopup?.({ title: '–û—à–∏–±–∫–∞', message: errorMessage, buttons: [{ type: 'ok' }] });
      hapticERR();
      
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      if (profileSaveBtn) {
        profileSaveBtn.disabled = false;
        profileSaveBtn.textContent = originalBtnText;
      }
    }
  });

  profileSaveBtn?.addEventListener('click', () => profileForm.requestSubmit());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
export async function loadProfileOnScreenOpen() {
  selectedAvatarFile = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
  await fetchProfileFromServer();
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
export { renderChips, activeValues, setActive, shake, refreshProfileView, loadProfileToForm };
