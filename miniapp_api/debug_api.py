#!/usr/bin/env python3
# debug_api.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

import os
import sys
import json
import sqlite3
from dotenv import load_dotenv
from security import validate_init_data, get_user_id_from_init_data
from db import init_db, get_user, upsert_user, get_user_count

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = os.getenv("DB_PATH", "/home/ubuntu/miniapp_api/app.db")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {db_path}")
    print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(db_path)}")
    
    if not os.path.exists(db_path):
        print("üîß –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        init_db(db_path)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_count = get_user_count(db_path)
    print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ
    test_user_id = 123456789
    test_profile = {
        'psn_id': 'TestUser',
        'platforms': ['üéÆ PlayStation'],
        'modes': ['üìñ –°—é–∂–µ—Ç'],
        'goals': ['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤'],
        'difficulties': ['ü•â –ë—Ä–æ–Ω–∑–∞'],
        'trophies': []
    }
    
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ñ–∏–ª—è...")
    success = upsert_user(db_path, test_user_id, test_profile)
    print(f"‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–æ—Ñ–∏–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
    retrieved_profile = get_user(db_path, test_user_id)
    print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if retrieved_profile else '–û—à–∏–±–∫–∞'}")
    
    if retrieved_profile:
        print(f"üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:")
        print(f"   PSN: {retrieved_profile.get('psn_id')}")
        print(f"   Platforms: {retrieved_profile.get('platforms')}")
        print(f"   Modes: {retrieved_profile.get('modes')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
    user_count_after = get_user_count(db_path)
    print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: {user_count_after}")
    
    return success and retrieved_profile is not None

def test_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"ü§ñ Bot token: {bot_token[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π initData (—ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–º, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç)
    test_init_data = "query_id=test&user=%7B%22id%22%3A123456789%7D&auth_date=1697123456&hash=test"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData...")
    result = validate_init_data(test_init_data, bot_token)
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è initData: {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)'}")
    
    return True

def test_env():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    bot_token = os.getenv("BOT_TOKEN")
    allowed_origin = os.getenv("ALLOWED_ORIGIN")
    db_path = os.getenv("DB_PATH")
    api_base = os.getenv("API_BASE")
    
    print(f"ü§ñ BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üåê ALLOWED_ORIGIN: {allowed_origin if allowed_origin else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üìÅ DB_PATH: {db_path if db_path else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó API_BASE: {api_base if api_base else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    return all([bot_token, allowed_origin, db_path, api_base])

def test_database_directly():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQLite"""
    print("\nüóÑÔ∏è –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = os.getenv("DB_PATH", "/home/ubuntu/miniapp_api/app.db")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {[table[0] for table in tables]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute("PRAGMA table_info(users);")
        columns = cursor.fetchall()
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in columns:
            print(f"   {col[1]} ({col[2]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM users;")
        count = cursor.fetchone()[0]
        print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ users: {count}")
        
        if count > 0:
            cursor.execute("SELECT user_id, psn_id, platforms, modes FROM users LIMIT 5;")
            rows = cursor.fetchall()
            print(f"üìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            for row in rows:
                print(f"   User ID: {row[0]}, PSN: {row[1]}, Platforms: {row[2]}, Modes: {row[3]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Tsushima Mini App API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = test_env()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_ok = test_security()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = test_database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
    db_direct_ok = test_database_directly()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ OK' if env_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üîê –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {'‚úÖ OK' if security_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å): {'‚úÖ OK' if db_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä—è–º—É—é): {'‚úÖ OK' if db_direct_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if all([env_ok, security_ok, db_ok, db_direct_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

if __name__ == "__main__":
    main()
