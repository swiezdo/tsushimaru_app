// profile.js
import { tg, $, hapticTapSmart, hapticERR, hapticOK } from './telegram.js';
import { focusAndScrollIntoView } from './ui.js';
import { fetchProfile, saveProfile as apiSaveProfile } from './api.js';

// ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —á–∏–ø–æ–≤ ----------
function renderChips(container, values, { single = false, onChange } = {}) {
  if (!container) return;
  container.innerHTML = '';
  values.forEach((v) => {
    const b = document.createElement('button');
    b.type = 'button';
    b.className = 'chip-btn';
    b.textContent = v;
    b.dataset.value = v;
    b.addEventListener('click', () => {
      hapticTapSmart();
      if (single) {
        container.querySelectorAll('.chip-btn').forEach((x) => x.classList.remove('active'));
        b.classList.add('active');
      } else {
        b.classList.toggle('active');
      }
      onChange?.();
    });
    container.appendChild(b);
  });
}
function activeValues(container) {
  if (!container) return [];
  return Array.from(container.querySelectorAll('.chip-btn.active')).map((b) => b.dataset.value);
}
function setActive(container, arr) {
  if (!container) return;
  const set = new Set(arr || []);
  container.querySelectorAll('.chip-btn').forEach((b) => {
    b.classList.toggle('active', set.has(b.dataset.value));
  });
}
function prettyLines(arr) { return (arr && arr.length) ? arr.join('\n') : '‚Äî'; }
function shake(el) {
  if (!el) return;
  el.classList.remove('shake');
  void el.offsetWidth;
  el.classList.add('shake');
}

// ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
const PLATFORM   = ['üéÆ PlayStation','üíª –ü–ö'];
const MODES      = ['üìñ –°—é–∂–µ—Ç','üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë','‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫–∏','üìú –ì–ª–∞–≤—ã'];
const GOALS      = ['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤','üîé –£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ','üë• –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤'];
const DIFFICULTY = ['ü•â –ë—Ä–æ–Ω–∑–∞','ü•à –°–µ—Ä–µ–±—Ä–æ','ü•á –ó–æ–ª–æ—Ç–æ','üèÖ –ü–ª–∞—Ç–∏–Ω–∞','üëª –ö–æ—à–º–∞—Ä','üî• HellMode'];

// ---------- LocalStorage ----------
const LS_KEY_PROFILE = 'tsu_profile_v1';

function saveProfile(data) {
  try {
    localStorage.setItem(LS_KEY_PROFILE, JSON.stringify(data));
    return true;
  } catch {
    return false;
  }
}

function loadProfile() {
  try {
    const raw = localStorage.getItem(LS_KEY_PROFILE);
    return raw ? JSON.parse(raw) : null;
  } catch {
    return null;
  }
}

// ---------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ----------
const v_real_name  = $('v_real_name');
const v_psn        = $('v_psn');
const v_platform   = $('v_platform');
const v_modes      = $('v_modes');
const v_goals      = $('v_goals');
const v_difficulty = $('v_difficulty');

// ---------- –§–æ—Ä–º–∞ ----------
const profileForm     = $('profileForm');
const profileSaveBtn  = $('profileSaveBtn');

function refreshProfileView() {
  if (v_platform)   v_platform.textContent   = prettyLines(activeValues($('platformChips')));
  if (v_modes)      v_modes.textContent      = prettyLines(activeValues($('modesChips')));
  if (v_goals)      v_goals.textContent      = prettyLines(activeValues($('goalsChips')));
  if (v_difficulty) v_difficulty.textContent = prettyLines(activeValues($('difficultyChips')));
}

function loadProfileToForm(profile) {
  if (!profile) return;
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
  if (profileForm.real_name) {
    profileForm.real_name.value = profile.real_name || '';
  }
  if (profileForm.psn) {
    profileForm.psn.value = profile.psn || '';
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏–ø—ã
  if (profile.platform) setActive($('platformChips'), profile.platform);
  if (profile.modes) setActive($('modesChips'), profile.modes);
  if (profile.goals) setActive($('goalsChips'), profile.goals);
  if (profile.difficulty) setActive($('difficultyChips'), profile.difficulty);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
  if (v_real_name) v_real_name.textContent = profile.real_name || '‚Äî';
  if (v_psn) v_psn.textContent = profile.psn || '‚Äî';
  refreshProfileView();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchProfileFromServer() {
  try {
    const serverProfile = await fetchProfile();
    if (serverProfile) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ LocalStorage
      saveProfile(serverProfile);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      loadProfileToForm(serverProfile);
      console.log('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error.status === 401) {
      tg?.showPopup?.({ 
        title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.', 
        buttons: [{ type: 'ok' }] 
      });
    } else if (error.status !== 404) {
      // 404 - –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      tg?.showPopup?.({ 
        title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', 
        buttons: [{ type: 'ok' }] 
      });
    }
  }
}

export function initProfile() {
  // –ß–∏–ø—ã
  renderChips($('platformChips'),   PLATFORM,   { onChange: refreshProfileView });
  renderChips($('modesChips'),      MODES,      { onChange: refreshProfileView });
  renderChips($('goalsChips'),      GOALS,      { onChange: refreshProfileView });
  renderChips($('difficultyChips'), DIFFICULTY, { onChange: refreshProfileView });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ LocalStorage –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  const savedProfile = loadProfile();
  if (savedProfile) {
    loadProfileToForm(savedProfile);
  }

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞
  fetchProfileFromServer();


  if (!profileForm) return;
  const nameInput = profileForm.real_name;
  const psnInput  = profileForm.psn;

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ Enter
  nameInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') { e.preventDefault(); psnInput?.focus(); }
  });
  psnInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') { e.preventDefault(); }
  });

  // Tap –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å–∞–º –ø–æ–¥–≤–∏–Ω–µ—Ç –ø–æ–ª–µ)
  nameInput?.addEventListener('focus', ()=>{ hapticTapSmart(); }, {passive:true});
  psnInput?.addEventListener('focus',  ()=>{ hapticTapSmart(); }, {passive:true});

  function isNameOk() {
    return !!(nameInput && (nameInput.value || '').trim());
  }
  function isPSNOk() {
    if (!psnInput) return false;
    const val = (psnInput.value || '').trim();
    if (!val) return false;
    return /^[A-Za-z0-9_-]{3,16}$/.test(val);
  }

  profileForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const okName = isNameOk();
    const okPSN  = isPSNOk();

    if (!okName || !okPSN) {
      const msgs = [];
      let firstBad = null;
      if (!okName) { msgs.push('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ò–º—è.'); shake(nameInput); firstBad = firstBad || nameInput; }
      if (!okPSN) {
        const val = (psnInput?.value || '').trim();
        if (!val) msgs.push('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ù–∏–∫ PlayStation.');
        else msgs.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ PlayStation (3‚Äì16: A‚ÄìZ, a‚Äìz, 0‚Äì9, -, _).');
        shake(psnInput); if (!firstBad) firstBad = psnInput;
      }
      if (firstBad) focusAndScrollIntoView(firstBad); // <‚Äî —Ñ–æ–∫—É—Å + —Å–∫—Ä–æ–ª–ª
      hapticERR();
      tg?.showPopup?.({ title: '–û—à–∏–±–∫–∞', message: msgs.join('\n'), buttons: [{ type: 'ok' }] });
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileData = {
      real_name: (nameInput?.value || '').trim(),
      psn: (psnInput?.value || '').trim(),
      platforms: activeValues($('platformChips')),
      modes: activeValues($('modesChips')),
      goals: activeValues($('goalsChips')),
      difficulties: activeValues($('difficultyChips'))
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const originalBtnText = profileSaveBtn?.textContent;
    if (profileSaveBtn) {
      profileSaveBtn.disabled = true;
      profileSaveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await apiSaveProfile(profileData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ LocalStorage
      saveProfile(profileData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (v_real_name) v_real_name.textContent = profileData.real_name || '‚Äî';
      if (v_psn) v_psn.textContent = profileData.psn || '‚Äî';
      refreshProfileView();

      hapticOK();
      tg?.showPopup?.({ title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', buttons: [{ type: 'ok' }] });
      window.scrollTo({ top: 0, behavior: 'smooth' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.';
      if (error.status === 401) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
      } else if (error.status === 400) {
        errorMessage = error.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π.';
      } else if (error.status >= 500) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (!navigator.onLine) {
        errorMessage = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      }
      
      tg?.showPopup?.({ title: '–û—à–∏–±–∫–∞', message: errorMessage, buttons: [{ type: 'ok' }] });
      hapticERR();
      
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      if (profileSaveBtn) {
        profileSaveBtn.disabled = false;
        profileSaveBtn.textContent = originalBtnText;
      }
    }
  });

  profileSaveBtn?.addEventListener('click', () => profileForm.requestSubmit());
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
export { renderChips, activeValues, setActive, shake, refreshProfileView };
