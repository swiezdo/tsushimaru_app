#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—Ä–æ—Ñ–µ–∏ Tsushima Mini App
–û—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç API —Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import asyncio
import aiohttp
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
TROPHY_GROUP_CHAT_ID = os.getenv("TROPHY_GROUP_CHAT_ID", "-1002348168326")
TROPHY_GROUP_TOPIC_ID = os.getenv("TROPHY_GROUP_TOPIC_ID", "5675")
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://your-domain.com/docs/index.html")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–æ—Ñ–µ–µ–≤ Tsushima.Ru Mini App.

üèÜ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–æ—Ñ–µ–∏", 
            web_app=WebAppInfo(url=f"{MINI_APP_URL}#trophies")
        )
    ]])
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ–µ–≤"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data.startswith("trophy_approve:"):
        # –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è
        parts = callback_data.split(":")
        if len(parts) == 3:
            user_id = int(parts[1])
            trophy_id = parts[2]
            
            success = await approve_trophy(user_id, trophy_id)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ –¢—Ä–æ—Ñ–µ–π {trophy_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è {trophy_id}"
                )
    
    elif callback_data.startswith("trophy_reject:"):
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è
        parts = callback_data.split(":")
        if len(parts) == 3:
            user_id = int(parts[1])
            trophy_id = parts[2]
            
            success = await reject_trophy(user_id, trophy_id)
            
            if success:
                await query.edit_message_text(
                    f"‚ùå –¢—Ä–æ—Ñ–µ–π {trophy_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è {trophy_id}"
                )

async def approve_trophy(user_id: int, trophy_id: str) -> bool:
    """–û–¥–æ–±—Ä—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.approve"
            data = {
                "user_id": user_id,
                "trophy_id": trophy_id
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"–¢—Ä–æ—Ñ–µ–π {trophy_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False

async def reject_trophy(user_id: int, trophy_id: str) -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.reject"
            data = {
                "user_id": user_id,
                "trophy_id": trophy_id
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"–¢—Ä–æ—Ñ–µ–π {trophy_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–æ—Ñ–µ–µ–≤...")
    print(f"üì° API URL: {API_BASE_URL}")
    print(f"üèÜ –ì—Ä—É–ø–ø–∞ —Ç—Ä–æ—Ñ–µ–µ–≤: {TROPHY_GROUP_CHAT_ID}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
