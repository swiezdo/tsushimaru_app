#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—Ä–æ—Ñ–µ–∏ Tsushima Mini App
–û—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç API —Å–µ—Ä–≤–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram 3.18.0
"""

import os
import asyncio
import aiohttp
import json
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
TROPHY_GROUP_CHAT_ID = os.getenv("TROPHY_GROUP_CHAT_ID", "-1002348168326")
TROPHY_GROUP_TOPIC_ID = os.getenv("TROPHY_GROUP_TOPIC_ID", "5675")
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://your-domain.com/docs/index.html")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–æ—Ñ–µ–µ–≤ Tsushima.Ru Mini App.

üèÜ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π WebApp
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–æ—Ñ–µ–∏",
        web_app=WebAppInfo(url=f"{MINI_APP_URL}#trophies")
    ))
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

async def get_trophy_and_user_info(user_id: int, trophy_id: str) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è –∏ PSN ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    trophy_name = trophy_id
    psn_id = str(user_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è
        async with aiohttp.ClientSession() as session:
            trophy_url = f"{API_BASE_URL}/api/trophy_info/{trophy_id}"
            async with session.get(trophy_url) as trophy_response:
                if trophy_response.status == 200:
                    trophy_data = await trophy_response.json()
                    trophy_name = f"{trophy_data.get('name', trophy_id)} {trophy_data.get('emoji', '')}".strip()
            
            # –ü–æ–ª—É—á–∞–µ–º PSN ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_url = f"{API_BASE_URL}/api/user_info/{user_id}"
            async with session.get(user_url) as user_response:
                if user_response.status == 200:
                    user_data = await user_response.json()
                    psn_id = user_data.get('psn_id', str(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return trophy_name, psn_id

@dp.callback_query(F.data.startswith("trophy_approve:"))
async def handle_trophy_approve(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è"""
    await callback.answer()
    
    callback_data = callback.data
    parts = callback_data.split(":")
    
    if len(parts) == 3:
        user_id = int(parts[1])
        trophy_id = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trophy_name, psn_id = await get_trophy_and_user_info(user_id, trophy_id)
        
        success = await approve_trophy(user_id, trophy_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n\n–¢—Ä–æ—Ñ–µ–π: {trophy_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {psn_id}"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è"
            )

@dp.callback_query(F.data.startswith("trophy_reject:"))
async def handle_trophy_reject(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è"""
    await callback.answer()
    
    callback_data = callback.data
    parts = callback_data.split(":")
    
    if len(parts) == 3:
        user_id = int(parts[1])
        trophy_id = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trophy_name, psn_id = await get_trophy_and_user_info(user_id, trophy_id)
        
        success = await reject_trophy(user_id, trophy_id)
        
        if success:
            await callback.message.edit_text(
                f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n–¢—Ä–æ—Ñ–µ–π: {trophy_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {psn_id}"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è"
            )

async def approve_trophy(user_id: int, trophy_id: str) -> bool:
    """–û–¥–æ–±—Ä—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.approve"
            data = {
                "user_id": user_id,
                "trophy_id": trophy_id
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–¢—Ä–æ—Ñ–µ–π {trophy_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False

async def reject_trophy(user_id: int, trophy_id: str) -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.reject"
            data = {
                "user_id": user_id,
                "trophy_id": trophy_id
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–¢—Ä–æ—Ñ–µ–π {trophy_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–æ—Ñ–µ–µ–≤...")
    logger.info(f"üì° API URL: {API_BASE_URL}")
    logger.info(f"üèÜ –ì—Ä—É–ø–ø–∞ —Ç—Ä–æ—Ñ–µ–µ–≤: {TROPHY_GROUP_CHAT_ID}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")