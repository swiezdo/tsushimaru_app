# app.py
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Tsushima Mini App API
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—à–∞ –Ω–∞ GitHub

import os
import uvicorn
import shutil
import json
import time
import requests
from fastapi import FastAPI, HTTPException, Depends, Header, Form, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
from typing import Optional, List, Dict, Any
from PIL import Image, ImageOps
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from security import validate_init_data, get_user_id_from_init_data
from db import init_db, get_user, upsert_user, create_build, get_build, get_user_builds, update_build_visibility, delete_build, add_trophy_to_user, get_all_users

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Tsushima Mini App API",
    description="API –¥–ª—è Telegram Mini App Tsushima.Ru",
    version="1.0.0"
)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_ORIGIN = os.getenv("ALLOWED_ORIGIN")
DB_PATH = os.getenv("DB_PATH", "/home/ubuntu/miniapp_api/app.db")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–æ—Ñ–µ–µ–≤
TROPHY_GROUP_CHAT_ID = os.getenv("TROPHY_GROUP_CHAT_ID", "-1002348168326")
TROPHY_GROUP_TOPIC_ID = os.getenv("TROPHY_GROUP_TOPIC_ID", "5675")
BOT_USERNAME = os.getenv("BOT_USERNAME", "swiezdo_testbot")

# –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ–µ–≤
_trophies_cache: Dict[str, Any] = {}
_trophies_cache_time: float = 0
CACHE_TTL = 3600  # 1 —á–∞—Å

def load_trophies_data() -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ–µ–≤ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    global _trophies_cache, _trophies_cache_time
    
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if _trophies_cache and (current_time - _trophies_cache_time) < CACHE_TTL:
        return _trophies_cache
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    try:
        frontend_url = os.getenv('FRONTEND_URL', ALLOWED_ORIGIN)
        trophies_url = f"{frontend_url}/docs/assets/data/trophies.json"
        
        response = requests.get(trophies_url, timeout=10)
        response.raise_for_status()
        
        _trophies_cache = response.json()
        _trophies_cache_time = current_time
        
        return _trophies_cache
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ—è —Å URL: {e}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫–µ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if _trophies_cache:
            return _trophies_cache
        
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ–µ–≤")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
async def send_telegram_message(chat_id: str, text: str, reply_markup: dict = None, message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if message_thread_id:
        data["message_thread_id"] = message_thread_id
    
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()

async def send_telegram_photo(chat_id: str, photo_path: str, caption: str = "", reply_markup: dict = None, message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    
    with open(photo_path, 'rb') as photo_file:
        data = aiohttp.FormData()
        data.add_field('chat_id', chat_id)
        data.add_field('photo', photo_file, filename='photo.jpg')
        data.add_field('caption', caption)
        data.add_field('parse_mode', 'HTML')
        
        if message_thread_id:
            data.add_field('message_thread_id', message_thread_id)
        
        if reply_markup:
            data.add_field('reply_markup', json.dumps(reply_markup))
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                return await response.json()

async def send_telegram_media_group(chat_id: str, photo_paths: List[str], caption: str = "", message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMediaGroup"
    
    media = []
    for i, photo_path in enumerate(photo_paths):
        media.append({
            "type": "photo",
            "media": f"attach://photo_{i}"
        })
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    photo_files = []
    try:
        for photo_path in photo_paths:
            photo_files.append(open(photo_path, 'rb'))
        
        data = aiohttp.FormData()
        data.add_field('chat_id', chat_id)
        data.add_field('media', json.dumps(media))
        data.add_field('parse_mode', 'HTML')
        
        if message_thread_id:
            data.add_field('message_thread_id', message_thread_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ FormData
        for i, photo_file in enumerate(photo_files):
            data.add_field(f'photo_{i}', photo_file, filename=f'photo_{i}.jpg')
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                result = await response.json()
                return result
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for photo_file in photo_files:
            photo_file.close()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ALLOWED_ORIGIN:
    raise ValueError("ALLOWED_ORIGIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    allow_credentials=False,  # –û—Ç–∫–ª—é—á–∞–µ–º credentials –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db(DB_PATH)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
@app.options("/{path:path}")
async def options_handler(path: str):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS.
    """
    print(f"üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—É—Ç–∏: /{path}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "false",
        }
    )


def get_current_user(x_telegram_init_data: Optional[str] = Header(None)) -> int:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData.
    
    Args:
        x_telegram_init_data: –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data
    
    Returns:
        user_id (int) –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    if not x_telegram_init_data:
        raise HTTPException(
            status_code=401,
            detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data"
        )
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
    init_data = validate_init_data(x_telegram_init_data, BOT_TOKEN)
    if not init_data:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    user_id = get_user_id_from_init_data(init_data)
    if not user_id:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
    
    return user_id


def validate_psn_format(psn: str) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç PSN –Ω–∏–∫–Ω–µ–π–º–∞.
    
    Args:
        psn: PSN –Ω–∏–∫–Ω–µ–π–º
    
    Returns:
        True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    if not psn:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é: 3-16 —Å–∏–º–≤–æ–ª–æ–≤, A-Z, a-z, 0-9, -, _
    pattern = r'^[A-Za-z0-9_-]{3,16}$'
    return bool(re.match(pattern, psn))


@app.get("/health")
async def health_check():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API.
    """
    return {"status": "ok", "message": "Tsushima Mini App API —Ä–∞–±–æ—Ç–∞–µ—Ç"}


@app.options("/api/profile.get")
async def options_profile_get():
    """
    OPTIONS —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    print(f"üîç OPTIONS /api/profile.get - ALLOWED_ORIGIN: {ALLOWED_ORIGIN}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true",
        }
    )


@app.options("/api/profile.save")
async def options_profile_save():
    """
    OPTIONS —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    print(f"üîç OPTIONS /api/profile.save - ALLOWED_ORIGIN: {ALLOWED_ORIGIN}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true",
        }
    )


@app.get("/api/profile.get")
async def get_profile(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency)
    
    Returns:
        JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ 404 –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    profile = get_user(DB_PATH, user_id)
    
    if not profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response_data = {
        "real_name": profile.get("real_name", ""),
        "psn_id": profile.get("psn_id", ""),
        "platforms": profile.get("platforms", []),
        "modes": profile.get("modes", []),
        "goals": profile.get("goals", []),
        "difficulties": profile.get("difficulties", []),
        "trophies": profile.get("trophies", [])
    }
    
    return response_data


@app.post("/api/profile.save")
async def save_profile(
    user_id: int = Depends(get_current_user),
    real_name: str = Form(...),
    psn_id: str = Form(...),
    platforms: List[str] = Form(default=[]),
    modes: List[str] = Form(default=[]),
    goals: List[str] = Form(default=[]),
    difficulties: List[str] = Form(default=[])
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency)
        real_name: –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        psn_id: PSN –Ω–∏–∫–Ω–µ–π–º
        platforms: –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        modes: –°–ø–∏—Å–æ–∫ —Ä–µ–∂–∏–º–æ–≤
        goals: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        difficulties: –°–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
    
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not real_name or not real_name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª–µ 'real_name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        )

    if not validate_psn_format(psn_id):
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PSN –Ω–∏–∫–Ω–µ–π–º–∞ (3-16 —Å–∏–º–≤–æ–ª–æ–≤: A-Z, a-z, 0-9, -, _)"
        )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    profile_data = {
        "real_name": real_name.strip(),
        "psn_id": psn_id.strip(),
        "platforms": platforms,
        "modes": modes,
        "goals": goals,
        "difficulties": difficulties
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    success = upsert_user(DB_PATH, user_id, profile_data)

    if not success:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        )

    return {"status": "ok", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"}


@app.get("/api/users.list")
async def get_users_list(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id –∏ psn_id)
    """
    users = get_all_users(DB_PATH)
    return {"users": users}


@app.get("/api/users.getProfile")
async def get_user_profile(
    target_user_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
        user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ 404 –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    profile = get_user(DB_PATH, target_user_id)
    
    if not profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response_data = {
        "user_id": profile.get("user_id"),
        "real_name": profile.get("real_name", ""),
        "psn_id": profile.get("psn_id", ""),
        "platforms": profile.get("platforms", []),
        "modes": profile.get("modes", []),
        "goals": profile.get("goals", []),
        "difficulties": profile.get("difficulties", []),
        "trophies": profile.get("trophies", [])
    }
    
    return response_data


@app.get("/api/stats")
async def get_stats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).
    """
    from db import get_user_count
    
    user_count = get_user_count(DB_PATH)
    
    return {
        "total_users": user_count,
        "api_version": "1.0.0"
    }


# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ë–ò–õ–î–û–í ==========

@app.post("/api/builds.create")
async def create_build_endpoint(
    user_id: int = Depends(get_current_user),
    name: str = Form(...),
    class_name: str = Form(...),
    tags: str = Form(...),  # JSON —Å—Ç—Ä–æ–∫–∞
    description: str = Form(""),
    photo_1: UploadFile = File(...),
    photo_2: UploadFile = File(...)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏–ª–¥ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è psn_id
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    author = user_profile.get('psn_id', '')
    if not author:
        raise HTTPException(
            status_code=400,
            detail="PSN ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if not name or not name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
    if not class_name or not class_name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ö–ª–∞—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ (—Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    try:
        tags_list = [t.strip() for t in tags.split(',') if t.strip()] if tags else []
    except:
        tags_list = []
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–ª–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è build_id
    build_data = {
        'user_id': user_id,
        'author': author,
        'name': name.strip(),
        'class': class_name.strip(),
        'tags': tags_list,
        'description': description.strip(),
        'photo_1': '',  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ
        'photo_2': '',  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ
        'is_public': 0
    }
    
    build_id = create_build(DB_PATH, build_data)
    if not build_id:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–¥–∞"
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∏–ª–¥–∞
    builds_dir = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id))
    os.makedirs(builds_dir, exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_1_path = os.path.join(builds_dir, 'photo_1.jpg')
        image1 = Image.open(photo_1.file)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        image1 = ImageOps.exif_transpose(image1)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (PNG —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º)
        if image1.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', image1.size, (255, 255, 255))
            if image1.mode == 'P':
                image1 = image1.convert('RGBA')
            background.paste(image1, mask=image1.split()[-1] if image1.mode == 'RGBA' else None)
            image1 = background
        image1.save(photo_1_path, 'JPEG', quality=85, optimize=True)
        photo_1.file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_2_path = os.path.join(builds_dir, 'photo_2.jpg')
        image2 = Image.open(photo_2.file)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        image2 = ImageOps.exif_transpose(image2)
        if image2.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', image2.size, (255, 255, 255))
            if image2.mode == 'P':
                image2 = image2.convert('RGBA')
            background.paste(image2, mask=image2.split()[-1] if image2.mode == 'RGBA' else None)
            image2 = background
        image2.save(photo_2_path, 'JPEG', quality=85, optimize=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –ë–î
        photo_1_url = f"/builds/{build_id}/photo_1.jpg"
        photo_2_url = f"/builds/{build_id}/photo_2.jpg"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–¥ —Å –ø—É—Ç—è–º–∏
        import sqlite3
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE builds SET photo_1 = ?, photo_2 = ? WHERE build_id = ?
        ''', (photo_1_url, photo_2_url, build_id))
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        # –£–¥–∞–ª—è–µ–º –±–∏–ª–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        delete_build(DB_PATH, build_id, user_id)
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
        if os.path.exists(builds_dir):
            shutil.rmtree(builds_dir)
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        )
    
    return {
        "status": "ok",
        "message": "–ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        "build_id": build_id
    }


@app.get("/api/builds.getMy")
async def get_my_builds(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±–∏–ª–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    builds = get_user_builds(DB_PATH, user_id)
    return {
        "status": "ok",
        "builds": builds
    }


@app.get("/api/builds.getPublic")
async def get_public_builds_endpoint():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã.
    """
    from db import get_public_builds as db_get_public_builds
    builds = db_get_public_builds(DB_PATH)
    return {
        "status": "ok",
        "builds": builds
    }


@app.get("/api/builds.getUserBuilds")
async def get_user_builds_endpoint(
    target_user_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –±–∏–ª–¥—ã –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
        user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from db import get_user_builds as db_get_user_builds
    all_builds = db_get_user_builds(DB_PATH, target_user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã
    public_builds = [build for build in all_builds if build.get('is_public') == 1]
    
    return {
        "status": "ok",
        "builds": public_builds
    }


@app.post("/api/builds.togglePublish")
async def toggle_build_publish(
    user_id: int = Depends(get_current_user),
    build_id: int = Form(...),
    is_public: int = Form(...)
):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å –±–∏–ª–¥–∞.
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è is_public
    if is_public not in (0, 1):
        raise HTTPException(
            status_code=400,
            detail="is_public –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1"
        )
    
    success = update_build_visibility(DB_PATH, build_id, user_id, is_public)
    
    if not success:
        raise HTTPException(
            status_code=404,
            detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
        )
    
    return {
        "status": "ok",
        "message": "–í–∏–¥–∏–º–æ—Å—Ç—å –±–∏–ª–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    }


@app.delete("/api/builds.delete")
async def delete_build_endpoint(
    build_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –£–¥–∞–ª—è–µ—Ç –±–∏–ª–¥ –∏ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    """
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    success = delete_build(DB_PATH, build_id, user_id)
    
    if not success:
        raise HTTPException(
            status_code=404,
            detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    builds_dir = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id))
    if os.path.exists(builds_dir):
        try:
            shutil.rmtree(builds_dir)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –±–∏–ª–¥–∞: {e}")
    
    return {
        "status": "ok",
        "message": "–ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    }


@app.get("/builds/{build_id}/{photo_name}")
async def get_build_photo(build_id: int, photo_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–ª–¥–∞.
    """
    photo_path = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id), photo_name)
    
    if not os.path.exists(photo_path):
        raise HTTPException(
            status_code=404,
            detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    return FileResponse(photo_path, media_type='image/jpeg')


@app.get("/api/trophy_info/{trophy_id}")
async def get_trophy_info(trophy_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–æ—Ñ–µ–µ –ø–æ ID"""
    try:
        trophies_data = load_trophies_data()
        trophy_info = trophies_data.get(trophy_id, {})
        return {
            "name": trophy_info.get('name', trophy_id),
            "emoji": trophy_info.get('emoji', 'üèÜ')
        }
    except Exception as e:
        raise HTTPException(status_code=404, detail="Trophy not found")

@app.get("/api/user_info/{user_id}")
async def get_user_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
    try:
        user = get_user(DB_PATH, user_id)
        if user:
            return {"psn_id": user.get('psn_id', str(user_id))}
        raise HTTPException(status_code=404, detail="User not found")
    except Exception as e:
        raise HTTPException(status_code=404, detail="User not found")

# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –¢–†–û–§–ï–ï–í ==========

@app.post("/api/trophies.submit")
async def submit_trophy_application(
    user_id: int = Depends(get_current_user),
    trophy_id: str = Form(...),
    comment: str = Form(""),
    photos: List[UploadFile] = File(...)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è psn_id
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    psn_id = user_profile.get('psn_id', '')
    if not psn_id:
        raise HTTPException(
            status_code=400,
            detail="PSN ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è trophy_id
    if not trophy_id or not trophy_id.strip():
        raise HTTPException(
            status_code=400,
            detail="ID —Ç—Ä–æ—Ñ–µ—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    if not photos or len(photos) == 0:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
    
    if len(photos) > 10:
        raise HTTPException(
            status_code=400,
            detail="–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for photo in photos:
        if not photo.content_type or not photo.content_type.startswith('image/'):
            raise HTTPException(
                status_code=400,
                detail="–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏
    trophies_dir = os.path.join(os.path.dirname(DB_PATH), 'trophies', str(user_id), trophy_id)
    os.makedirs(trophies_dir, exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_paths = []
    try:
        for i, photo in enumerate(photos):
            photo_path = os.path.join(trophies_dir, f'photo_{i+1}.jpg')
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pillow
            image = Image.open(photo.file)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
            image = ImageOps.exif_transpose(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
            image.save(photo_path, 'JPEG', quality=85, optimize=True)
            photo_paths.append(photo_path)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ñ–∞–π–ª–∞
            photo.file.seek(0)
    
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(trophies_dir):
            shutil.rmtree(trophies_dir)
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    try:
        trophies_data = load_trophies_data()
        trophy_info = trophies_data.get(trophy_id, {})
        trophy_name = trophy_info.get('name', trophy_id)
        trophy_emoji = trophy_info.get('emoji', 'üèÜ')
        trophy_description = trophy_info.get('description', [])
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ—è: {e}")
        trophy_name = trophy_id
        trophy_emoji = 'üèÜ'
        trophy_description = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    message_text = f"""üèÜ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {psn_id}
üèÜ <b>–¢—Ä–æ—Ñ–µ–π:</b> {trophy_name} {trophy_emoji}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è:</b>
"""
    
    for desc_line in trophy_description:
        message_text += f"‚Ä¢ {desc_line}\n"
    
    if comment.strip():
        message_text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{comment.strip()}"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    reply_markup = {
        "inline_keyboard": [[
            {
                "text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                "callback_data": f"trophy_approve:{user_id}:{trophy_id}"
            },
            {
                "text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                "callback_data": f"trophy_reject:{user_id}:{trophy_id}"
            }
        ]]
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        if len(photo_paths) == 1:
            # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await send_telegram_photo(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_path=photo_paths[0],
                caption=message_text,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=f"–ó–∞—è–≤–∫–∞ –æ—Ç {psn_id} –Ω–∞ —Ç—Ä–æ—Ñ–µ–π {trophy_name} {trophy_emoji}",
                reply_markup=reply_markup,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=message_text,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ
            await send_telegram_media_group(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_paths=photo_paths,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
            
            # –ò –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=f"–ó–∞—è–≤–∫–∞ –æ—Ç {psn_id} –Ω–∞ —Ç—Ä–æ—Ñ–µ–π {trophy_name} {trophy_emoji}",
                reply_markup=reply_markup,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞—è–≤–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
    
    return {
        "status": "ok",
        "message": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    }


@app.post("/api/trophies.approve")
async def approve_trophy_application(
    user_id: int = Form(...),
    trophy_id: str = Form(...)
):
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ç—Ä–æ—Ñ–µ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º).
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ—Ñ–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success = add_trophy_to_user(DB_PATH, user_id, trophy_id)
    
    if not success:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∑–∞—è–≤–∫–æ–π
    trophies_dir = os.path.join(os.path.dirname(DB_PATH), 'trophies', str(user_id), trophy_id)
    if os.path.exists(trophies_dir):
        try:
            shutil.rmtree(trophies_dir)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        trophies_data = load_trophies_data()
        trophy_info = trophies_data.get(trophy_id, {})
        trophy_name = trophy_info.get('name', trophy_id)
        trophy_emoji = trophy_info.get('emoji', 'üèÜ')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ—è: {e}")
        trophy_name = trophy_id
        trophy_emoji = 'üèÜ'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    message_text = f"""üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>

–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç—Ä–æ—Ñ–µ–π <b>{trophy_name}</b> {trophy_emoji}

–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Tsushima.Ru"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    reply_markup = {
        "inline_keyboard": [[
            {
                "text": "üèÜ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "url": f"https://t.me/{BOT_USERNAME}?startapp=command&mode=fullscreen"
            }
        ]]
    }
    
    try:
        await send_telegram_message(
            chat_id=str(user_id),
            text=message_text,
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    return {
        "status": "ok",
        "message": "–¢—Ä–æ—Ñ–µ–π —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω"
    }


@app.post("/api/trophies.reject")
async def reject_trophy_application(
    user_id: int = Form(...),
    trophy_id: str = Form(...)
):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ç—Ä–æ—Ñ–µ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º).
    """
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∑–∞—è–≤–∫–æ–π
    trophies_dir = os.path.join(os.path.dirname(DB_PATH), 'trophies', str(user_id), trophy_id)
    if os.path.exists(trophies_dir):
        try:
            shutil.rmtree(trophies_dir)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        trophies_data = load_trophies_data()
        trophy_info = trophies_data.get(trophy_id, {})
        trophy_name = trophy_info.get('name', trophy_id)
        trophy_emoji = trophy_info.get('emoji', 'üèÜ')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ—è: {e}")
        trophy_name = trophy_id
        trophy_emoji = 'üèÜ'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    message_text = f"""‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π <b>{trophy_name}</b> {trophy_emoji} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ —Å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏."""
    
    try:
        await send_telegram_message(
            chat_id=str(user_id),
            text=message_text
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    return {
        "status": "ok",
        "message": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    }


@app.get("/trophies/{user_id}/{trophy_id}/{photo_name}")
async def get_trophy_photo(user_id: int, trophy_id: str, photo_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–æ—Ñ–µ–π.
    """
    photo_path = os.path.join(os.path.dirname(DB_PATH), 'trophies', str(user_id), trophy_id, photo_name)
    
    if not os.path.exists(photo_path):
        raise HTTPException(
            status_code=404,
            detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    return FileResponse(photo_path, media_type='image/jpeg')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è CORS
@app.exception_handler(HTTPException)
async def cors_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail}
    )


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Tsushima Mini App API...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print(f"üåê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π origin: {ALLOWED_ORIGIN}")
    print(f"ü§ñ Bot token: {BOT_TOKEN[:10]}..." if BOT_TOKEN else "‚ùå Bot token –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    uvicorn.run(
        "app:app",
        host="127.0.0.1",
        port=8000,
        reload=False,
        log_level="info"
    )
